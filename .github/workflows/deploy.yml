name: Deploy to Server

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the Docker image
        run: |
          docker build -t ta-ma-backend .

      - name: Copy Docker image and files to the server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 176.108.254.119
          username: aka_curiosity
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./Dockerfile"
          target: "/home/aka_curiosity/ta-ma-backend"

      - name: Check SSH connection
        run: |
            # Создаем временный файл для приватного ключа из секретов
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > private_key.pem
            
            # Устанавливаем права доступа к ключу (только для чтения)
            chmod 600 private_key.pem
            
            # Проверяем подключение к серверу через SSH
            ssh -o StrictHostKeyChecking=no -i private_key.pem aka_curiosity@176.108.254.119 "echo 'SSH connection successful!'"
            
            # Удаляем временный ключ после использования
            rm -f private_key.pem

      - name: SSH to the server and deploy Docker container
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -i private_key.pem aka_curiosity@$SERVER_IP << 'EOF'
            # Создаём директорию, если она не существует
            mkdir -p /home/aka_curiosity/ta-ma-backend

            # Переходим в директорию с проектом
            cd /home/aka_curiosity/ta-ma-backend

            # Собираем Docker образ
            docker build -t ta-ma-backend .

            # Останавливаем и удаляем старый контейнер, если есть
            docker stop ta-ma-backend || true
            docker rm ta-ma-backend || true

            # Запускаем новый контейнер
            docker run -d -p 8080:8080 --name ta-ma-backend ta-ma-backend
          EOF
